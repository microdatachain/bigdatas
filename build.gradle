buildscript {
	    repositories {	      
	        mavenCentral()	
	        //mavenLocal()        
	    }
	
	    dependencies {
	        //classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.4'
	      //  classpath 'org.akhikhl.gretty:gretty:+'
	        
	    }
	}
 
configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION	
	ext.microdatachain_version=PROJ_microdatachain_VERSION
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "maven"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	jar {
		manifest {
			attributes (
					'Implementation': version,
					'Specification-Version': version,
					'Implementation-Vendor': 'microdatachain',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testCompile 'junit:junit:4.12'
		
		 
	}

	repositories {
		mavenLocal()
		maven {
	        url "http://maven.aliyun.com/nexus/content/groups/public"
	    }
		mavenCentral()
		
		
	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
}

 
configure(subprojects) { subproject ->
	task sourcesJar(type: Jar) {
		classifier = "sources"	
		from sourceSets.main.allJava
	}
	
	task javaDocJar(type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
	    archives sourcesJar, javaDocJar
	}
	dependencies {
		compile (
				[group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonversion}",transitive: false],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonversion}",transitive: false],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonversion}",transitive: false],
            [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: "${jacksonversion}",transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-util', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-core', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-event', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-mvc', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-soa', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-velocity', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain', name: 'microdatachain-persistent', version: "${PROJ_microdatachain_VERSION}", transitive: false],
	            [group: 'com.microdatachain.security', name: 'microdatachain-security', version: "${PROJ_SECURITY_VERSION}", transitive: false],
	            [group: 'com.microdatachain.security', name: 'microdatachain-security-web', version: "${PROJ_SECURITY_VERSION}", transitive: false],
	            [group: 'com.microdatachain.security', name: 'microdatachain-security-web-inf', version: "${PROJ_SECURITY_VERSION}", transitive: false],
	           
	            [group: 'oro', name: 'oro', version: '2.0.8', transitive: false],
	            [group: 'cglib', name: 'cglib-nodep', version: '3.1', transitive: false],
				[group: 'org.jgroups', name: 'jgroups', version: '4.0.1.Final', transitive: false]     ,
				[group: 'commons-lang', name: 'commons-lang', version: '2.6', transitive: false],
	            [group: 'commons-logging', name: 'commons-logging', version: '1.1.3', transitive: false],
	            [group: 'commons-beanutils', name: 'commons-beanutils-core', version: '1.8.0', transitive: false],
	            [group: 'commons-cli', name: 'commons-cli', version: '1.2', transitive: false],
	            [group: 'commons-codec', name: 'commons-codec', version: '1.4', transitive: false],
	            [group: 'org.apache.commons', name: 'commons-compress', version: '1.4.1', transitive: false],
	            [group: 'commons-collections', name: 'commons-collections', version: '3.2.1', transitive: false],
	            [group: 'commons-configuration', name: 'commons-configuration', version: '1.6', transitive: false],
	            [group: 'commons-daemon', name: 'commons-daemon', version: '1.0.13', transitive: false],
	            [group: 'commons-io', name: 'commons-io', version: '2.4', transitive: false],
	            [group: 'commons-digester', name: 'commons-digester', version: '1.8', transitive: false],
	            [group: 'org.apache.commons', name: 'commons-math3', version: '3.1.1', transitive: false],
	            [group: 'commons-net', name: 'commons-net', version: '3.1', transitive: false],
	            
	            
	            [group: 'com.google.code.gson', name: 'gson', version: '2.2.4', transitive: false]     ,
				[group: 'com.google.guava', name: 'guava', version: '11.0.2', transitive: false],
				
	            [group: 'org.apache.hadoop', name: 'hadoop-annotations', version: "${hadoop_version}", transitive: false],
	            [group: 'org.apache.hadoop', name: 'hadoop-auth', version: "${hadoop_version}", transitive: false],
	            [group: 'org.apache.hadoop', name: 'hadoop-common', version: "${hadoop_version}", transitive: false],
	            [group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: "${hadoop_version}", transitive: false],
	            [group: 'org.apache.hadoop', name: 'hadoop-hdfs-nfs', version: "${hadoop_version}", transitive: false],
	            [group: 'org.apache.htrace', name: 'htrace-core', version: '3.1.0-incubating', transitive: false],
	            [group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: '3.1.2', transitive: false],
	            [group: 'com.google.protobuf', name: 'protobuf-java', version: '2.5.0', transitive: false],
	            
           	[group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25', transitive: true],


	            fileTree(dir: '../lib', include: '**/*.jar'),
	            [group: 'jstl', name: 'jstl', version: '1.2', transitive: false],
	            [group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2', transitive: false],
	    )
	}
 
	
}

configure([project(":bigdata"),project(":bigdata-web")]) { subproject ->
	ext.uploadtocenter=uploadArchivesToMavenCenter.equals("true")
	if(uploadtocenter)
	{
		signing {
		        //required { uploadtocenter }
		        sign configurations.archives
		 }
	}
	uploadArchives {
		  repositories {
		   
			    mavenDeployer {
			    
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	     	repository(url: sonatype_url) {
	     		
			         authentication(userName: sonatype_username, password: sonatype_password)
			}
				
				
				
				 	
		      pom.project {
		        name project.name
		        packaging 'jar'
		        // optionally artifactId can be defined here 
		        description PROJ_DESCRIPTION
		        url PROJ_WEBSITEURL
	
		        scm {
		          connection scm_connection
		          developerConnection scm_developerConnection
		          url scm_url
		        }
	
		        licenses {
		          license {
		            name PROJ_LICENCE_NAME
		            url PROJ_LICENCE_URL
		          }
		        }
	
		        developers {
		          developer {
		            id DEVELOPER_ID
		            name DEVELOPER_NAME
		            email DEVELOPER_EMAIL
		          }
		        }
		      }
		    }
		  }
		}
}